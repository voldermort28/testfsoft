//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MySony.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MySonyEntities : DbContext
    {
        public MySonyEntities()
            : base("name=MySonyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<admin> admins { get; set; }
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<city> cities { get; set; }
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<customerlock> customerlocks { get; set; }
        public virtual DbSet<customertype> customertypes { get; set; }
        public virtual DbSet<district> districts { get; set; }
        public virtual DbSet<education> educations { get; set; }
        public virtual DbSet<job> jobs { get; set; }
        public virtual DbSet<LogError> LogErrors { get; set; }
        public virtual DbSet<order> orders { get; set; }
        public virtual DbSet<PassChange> PassChanges { get; set; }
        public virtual DbSet<product> products { get; set; }
        public virtual DbSet<resethistory> resethistories { get; set; }
        public virtual DbSet<RS_Article> RS_Article { get; set; }
        public virtual DbSet<RS_Branch> RS_Branch { get; set; }
        public virtual DbSet<RS_Category> RS_Category { get; set; }
        public virtual DbSet<RS_Config> RS_Config { get; set; }
        public virtual DbSet<RS_FAQ> RS_FAQ { get; set; }
        public virtual DbSet<RS_Images> RS_Images { get; set; }
        public virtual DbSet<RS_mail_template> RS_mail_template { get; set; }
        public virtual DbSet<RS_Menu> RS_Menu { get; set; }
        public virtual DbSet<RS_Video> RS_Video { get; set; }
        public virtual DbSet<serial> serials { get; set; }
        public virtual DbSet<shop> shops { get; set; }
        public virtual DbSet<shoptype> shoptypes { get; set; }
        public virtual DbSet<status> status { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual ObjectResult<GetCustomerProduct_Result> GetCustomerProduct(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerProduct_Result>("GetCustomerProduct", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<ProductReportByMonthCenter_Result> ProductReportByMonthCenter(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByMonthCenter_Result>("ProductReportByMonthCenter", yearParameter);
        }
    
        public virtual ObjectResult<SearchSerial_Result> SearchSerial(string series, string warrantyNumber, string modelname, string okAnpha, string battery, string adapter)
        {
            var seriesParameter = series != null ?
                new ObjectParameter("series", series) :
                new ObjectParameter("series", typeof(string));
    
            var warrantyNumberParameter = warrantyNumber != null ?
                new ObjectParameter("warrantyNumber", warrantyNumber) :
                new ObjectParameter("warrantyNumber", typeof(string));
    
            var modelnameParameter = modelname != null ?
                new ObjectParameter("modelname", modelname) :
                new ObjectParameter("modelname", typeof(string));
    
            var okAnphaParameter = okAnpha != null ?
                new ObjectParameter("okAnpha", okAnpha) :
                new ObjectParameter("okAnpha", typeof(string));
    
            var batteryParameter = battery != null ?
                new ObjectParameter("battery", battery) :
                new ObjectParameter("battery", typeof(string));
    
            var adapterParameter = adapter != null ?
                new ObjectParameter("adapter", adapter) :
                new ObjectParameter("adapter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSerial_Result>("SearchSerial", seriesParameter, warrantyNumberParameter, modelnameParameter, okAnphaParameter, batteryParameter, adapterParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateOrderIdOnSerial(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderIdOnSerial", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetSerial_Result> GetSerial()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSerial_Result>("GetSerial");
        }
    
        public virtual ObjectResult<GetCustomerShop_Result> GetCustomerShop(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerShop_Result>("GetCustomerShop", startDateParameter, endDateParameter);
        }
    }
}
